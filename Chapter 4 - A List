// I wrote arrayToList to build a data structure, in which objects are forming a chain.
// Starting from the last place in the array, we "ladder up", constantly giving the
// array value and placing the rest of the list in the list variable.

function arrayToList(array) {
  var list = null;
  for (var i = array.length - 1; i >= 0; i--)
    list = {value: array[i], rest: list};
  return list;
} 

// I wrote listToArray to produce an array from a list. The array starts empty. But
// every iteration of the loop, node points to the current sublist, and the body can
// read its value property to get the current value. At the end of an iteration, node
// moves to the next sublist.

function listToArray (list) {
  var array = [];
  for (var node = list; node; node = node.rest)
    array.push(node.value);
  return array;
}

// This is kind of like what I did with arrayToList. The helper function prepend
// takes a value and a list and returns the value to the front of the list.

function prepend(value, list) {
  return {value: value, rest: list}
}

// The helper function nth takes a list and a number and returns the element at the
// given position in the list, or undefined when there's no such value.
// It is recursive; it keeps repeating until n == 0, the point at which we find
// our nth value. This value is then returned.

function nth(list, n) {
  if (!list)
    return undefined;
  else if (n == 0)
    return list.value;
  else
    return nth(list.rest, n-1);
}

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
