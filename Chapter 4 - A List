// The function arrayToList takes an array as input, creates an empty list, 
// and starting from the back of the array, the list is changed each time so that
// it displays: {the value at the current position i, the rest of the list}.

function arrayToList(array) {
    var list = null;
    for (var i=array.length-1; i>=0; i--) {
        list = {value: array[i], rest: list};
    }
    return list;
}
arrayToList([1,2,3]);

// The function listToArray takes a list as input, creates an empty array,
// and starting from the front of the list, the array is chcanged each time so that
// it has the value at i added to the end of it. This happens for the length of the list.

function listToArray(list) {
    var array = [];
    for (var i=list; i; i=i.rest) {
        array.push(i.value);
    }
    return array;
}

// This function is similar to arrayToList. The helper function prepend
// takes a value and a list and returns the value to the front of the list.

function prepend(element, list) {
    return {value: element, rest: list};
}

// The helper function nth takes a list and a number and returns the element at the
// given position in the list, or undefined when there's no such value.
// It is recursive; it keeps repeating until n == 0, the point at which we find
// our nth value. This value is then returned.

function nth(list, number) {
    if (!list) {return undefined;}
    else if (number === 0) {return list.value;}
    else {return nth(list.rest, number-1);}
}

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
